









Here's how you can add a conditional to every template except `pageLoader`:

```
let templates = {
pageLoader: { template: pageLoader },
header: someCondition && { template: header },
routerView: someCondition && { template: routerView },
footer: someCondition && { template: footer },
cookiesPrompt: someCondition && { template: cookiesPrompt }
};
```

However, this will result in `null` or `false` values for the properties when the condition is not met. To avoid this, you can use the following approach:

```
let templates = {
pageLoader: { template: pageLoader },
};

if (someCondition) {
templates.header = { template: header };
templates.routerView = { template: routerView };
templates.footer = { template: footer };
templates.cookiesPrompt = { template: cookiesPrompt };
}
```

Alternatively, you can use a loop to add the templates conditionally:

```
let templates = {
pageLoader: { template: pageLoader },
};

const templateList = ['header', 'routerView', 'footer', 'cookiesPrompt'];
if (someCondition) {
templateList.forEach((templateName) => {
templates[templateName] = { template: eval(templateName) };
});
}
```

Note that using `eval` can be a security risk if you're not controlling the input. If the template names are fixed, you can use an object to map the template names to their corresponding variables:

```
let templates = {
pageLoader: { template: pageLoader },
};

const templateList = {
header,
routerView,
footer,
cookiesPrompt,
};

if (someCondition) {
Object.keys(templateList).forEach((templateName) => {
templates[templateName] = { template: templateList[templateName] };
});
}
```










